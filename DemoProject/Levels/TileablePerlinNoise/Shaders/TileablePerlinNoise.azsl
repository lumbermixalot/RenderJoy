
#include <RenderJoy/RenderJoyPassSrg.azsli>

// This version of Perlin Noise is simpler than PerlinNoise.azsl.
// Changed the implementation to what is described here:
// https://www.ronja-tutorials.com/post/026-perlin-noise/
// Because is easier to understand and is conducive to better tiling.

// t is a value from 0.0 to 1.0.
float fade(float t) {
    // Fade function as defined by Ken Perlin.  This eases coordinate values
    // so that they will ease towards integral values.  This ends up smoothing
    // the final output.
    // 6t^5 - 15t^4 + 10t^3
    return t * t * t * (t * (t * 6 - 15) + 10);
}

// https://www.ronja-tutorials.com/post/024-white-noise/
// get a scalar random value from a 3d value
// Returns a value between 0.0 and 1.0
float rand3dTo1d(float3 value, float3 dotDir = float3(12.9898, 78.233, 37.719))
{
    //make value smaller to avoid artefacts
    float3 smallValue = sin(value);
    //get scalar value from 3d vector
    float random = dot(smallValue, dotDir);
    //make value more random by making it bigger and then taking teh factional part
    random = frac(sin(random) * 143758.5453);
    return random;
}

// https://www.ronja-tutorials.com/post/024-white-noise/
// Returns a vector where all components will be between 0 and 1
float3 rand3dTo3d(float3 seedVector)
{
    return float3(
        rand3dTo1d(seedVector, float3(12.989, 78.233, 37.719)),
        rand3dTo1d(seedVector, float3(39.346, 11.135, 83.155)),
        rand3dTo1d(seedVector, float3(73.156, 52.235, 09.151))
    );
}

// Values x, y and z can be arbitrary values
// that range let's say within 64 pixels,
// or within 256 pixels, or within the Viewport size
float Perlin3D(float3 input)
{
    float3 fraction = frac(input);
    float3 interpolator = float3(fade(fraction.x), fade(fraction.y), fade(fraction.z));

	float cellNoiseZ[2];
	[unroll]
	for(int iZ=0; iZ <= 1; iZ++)
    {
		float cellNoiseY[2];
		[unroll]
		for(int iY=0; iY <= 1; iY++)
        {
			float cellNoiseX[2];
			[unroll]
			for(int iX=0; iX <= 1; iX++)
            {
				float3 cell = floor(input) + float3(iX, iY, iZ);
				float3 cellDirection = rand3dTo3d(cell) * 2 - 1; // Guarantees -1 to 1
				float3 compareVector = fraction - float3(iX, iY, iZ);
				cellNoiseX[iX] = dot(cellDirection, compareVector);
			}
			cellNoiseY[iY] = lerp(cellNoiseX[0], cellNoiseX[1], interpolator.x);
		}
		cellNoiseZ[iZ] = lerp(cellNoiseY[0], cellNoiseY[1], interpolator.y);
	}

	float noise = lerp(cellNoiseZ[0], cellNoiseZ[1], interpolator.z);
    return noise;
}

float3 myModulo(float3 divident, float3 divisor)
{
    float3 positiveDivident = divident % divisor + divisor;
    return positiveDivident % divisor;
}

// Values x, y and z can be arbitrary values
// that range let's say within 64 pixels,
// or within 256 pixels, or within the Viewport size
float TileablePerlin3D(float3 input, float3 period)
{
    float3 fraction = frac(input);
    float3 interpolator = float3(fade(fraction.x), fade(fraction.y), fade(fraction.z));

	float cellNoiseZ[2];
	[unroll]
	for(int iZ=0; iZ <= 1; iZ++)
    {
		float cellNoiseY[2];
		[unroll]
		for(int iY=0; iY <= 1; iY++)
        {
			float cellNoiseX[2];
			[unroll]
			for(int iX=0; iX <= 1; iX++)
            {
				float3 cell = floor(input) + float3(iX, iY, iZ);
                cell = myModulo(cell, period);
				float3 cellDirection = rand3dTo3d(cell) * 2 - 1; // Guarantees -1 to 1
				float3 compareVector = fraction - float3(iX, iY, iZ);
				cellNoiseX[iX] = dot(cellDirection, compareVector);
			}
			cellNoiseY[iY] = lerp(cellNoiseX[0], cellNoiseX[1], interpolator.x);
		}
		cellNoiseZ[iZ] = lerp(cellNoiseY[0], cellNoiseY[1], interpolator.y);
	}

	float noise = lerp(cellNoiseZ[0], cellNoiseZ[1], interpolator.z);
    return noise;
}

float2 myModulo2(float2 divident, float2 divisor)
{
    float2 positiveDivident = divident % divisor + divisor;
    return positiveDivident % divisor;
}

// https://www.ronja-tutorials.com/post/024-white-noise/
// get a scalar random value from a 3d value
// Returns a value between 0.0 and 1.0
float rand2dTo1d(float2 value, float2 dotDir = float2(12.9898, 78.233))
{
    //make value smaller to avoid artefacts
    float2 smallValue = sin(value);
    //get scalar value from 3d vector
    float random = dot(smallValue, dotDir);
    //make value more random by making it bigger and then taking teh factional part
    random = frac(sin(random) * 143758.5453);
    return random;
}

// https://www.ronja-tutorials.com/post/024-white-noise/
// Returns a vector where all components will be between 0 and 1
float2 rand2dTo2d(float2 seedVector)
{
    return float2(
        rand2dTo1d(seedVector, float2(12.989, 78.233)),
        rand2dTo1d(seedVector, float2(39.346, 11.135))
    );
}

float TileablePerlin2D(float2 input, float2 period)
{
    float2 fraction = frac(input);
    float2 interpolator = float2(fade(fraction.x), fade(fraction.y));

    float2 inputMin = floor(input);
    inputMin = myModulo2(inputMin, period);

    float2 inputMax = ceil(input);
    inputMax = myModulo2(inputMax, period);

    //generate random directions
	float2 lowerLeftDirection  = rand2dTo2d(float2(inputMin.x, inputMin.y)) * 2 - 1;
	float2 lowerRightDirection = rand2dTo2d(float2(inputMax.x, inputMin.y)) * 2 - 1;
	float2 upperLeftDirection  = rand2dTo2d(float2(inputMin.x, inputMax.y)) * 2 - 1;
	float2 upperRightDirection = rand2dTo2d(float2(inputMax.x, inputMax.y)) * 2 - 1;

	//get values of cells based on fraction and cell directions
	float lowerLeftFunctionValue =  dot(lowerLeftDirection,  fraction - float2(0, 0));
	float lowerRightFunctionValue = dot(lowerRightDirection, fraction - float2(1, 0));
	float upperLeftFunctionValue =  dot(upperLeftDirection,  fraction - float2(0, 1));
	float upperRightFunctionValue = dot(upperRightDirection, fraction - float2(1, 1));


    //interpolate between values
	float lowerCells = lerp(lowerLeftFunctionValue, lowerRightFunctionValue, interpolator.x);
	float upperCells = lerp(upperLeftFunctionValue, upperRightFunctionValue, interpolator.x);

	float noise = lerp(lowerCells, upperCells, interpolator.y);
    return noise;
}

// Values x, y and z can be arbitrary values
// that range let's say within 64 pixels,
// or within 256 pixels, or within the Viewport size
float OctavePerlin3D(float3 input, float3 period, int octaves, float persistence) {
    float total = 0;
    float frequency = 4;
    float amplitude = 1;
    float maxValue = 0;  // Used for normalizing result to 0.0 - 1.0
    for(int i=0;i<octaves;i++) {
        total += TileablePerlin3D(input * frequency + i * 0.72354, period * frequency) * amplitude;
        
        maxValue += amplitude;
        
        amplitude *= persistence;
        frequency *= 2;
    }
    
    return total/maxValue;
}


// Screen coordinates orientation
// (0, 0)------>  (iResolution.x, 0)
//       |
//       |
//       |
// (0, iResolution.y)

PSOutput MainPS(VSOutput IN) // V2
{
    // Version2 does light calculation
    PSOutput OUT;

    float seed = 0.25 * iTime;
    const float size = 4.0;
    float2 uv = IN.m_position.xy/iResolution.xy*size;

    //float p = Perlin(IN.m_position.x/iResolution.x, IN.m_position.y/iResolution.y);
    //float p = Perlin3D(IN.m_position.x, IN.m_position.y, seed);

    const int octaves = 4;
    const float persistence = 0.438; // How much each octave contributes to the signal
    //float p = OctavePerlin3D(IN.m_position.x, IN.m_position.y, seed, octaves, persistence);
    
    float3 input = float3(uv.x, uv.y, seed);
    
    //get noise and adjust it to be ~0-1 range
    float p = OctavePerlin3D(input, float3(1,1,1), octaves, persistence) + 0.5;

    OUT.m_color = float4(p, p, p, 1);

    return OUT;
}

