
#include <RenderJoy/RenderJoyPassSrg.azsli>

#if 1

#include "TileablePerlinNoise_A.azsli"
#include "TileableWorleyNoise_A.azsli"

#else

#include "TileablePerlinNoise_B.azsli"
#include "TileableWorleyNoise_B.azsli"

#endif


// Utility function that maps a value from one range to another.
// From GPU Pro 7. Chapter 4
float Remap(float value, float oldMin, float oldMax, float newMin, float newMax)
{
    return (((value - oldMin) / (oldMax - oldMin)) * (newMax - newMin)) + newMin;
}

// Per Guerrilla Games' Andrew Schneider.
float WorleyNoiseFbmForClouds(float3 input, float frequency)
{
    const float wn1 = WorleyNoise(input * frequency, frequency) * .625;
    const float wn2 = WorleyNoise(input * frequency * 2, frequency * 2) * .25;
    const float wn3 = WorleyNoise(input * frequency * 4, frequency * 4) * .125;
    return wn1 + wn2 + wn3;
}


// Values x, y and z can be arbitrary values
// that range let's say within 64 pixels,
// or within 256 pixels, or within the Viewport size
float2 PerlinWorleyNoise(float3 input, const float frequency = 4.0) {
    const int perlinOctaves = 7;
    const float perlinPersistence = 0.5504;

    float perlinNoise = PerlinNoiseFbm(input, frequency, perlinOctaves, perlinPersistence);
    // By default noise color is biased towards black.
    // let's change that.
    perlinNoise = lerp(1, perlinNoise, .5);
    perlinNoise = abs( (perlinNoise * 2.0) - 1.0);


    float worleyNoise = WorleyNoiseFbmForClouds(input, frequency);
    float pwNoise = Remap(perlinNoise, 0.0, 1.0, worleyNoise, 1.0);

    return float2(pwNoise, worleyNoise);
}

// Screen coordinates orientation
// (0, 0)------>  (iResolution.x, 0)
//       |
//       |
//       |
// (0, iResolution.y)
PSOutput MainPS(VSOutput IN) // V2
{
    // Version2 does light calculation
    PSOutput OUT;

    float2 uv = IN.m_position.xy / iResolution.xy;
    float2 mouse = iMouse.xy / iResolution.xy;



    const float slices = 128.; // Number of layers of the 3d texture.
    float z = floor(mouse.y * slices) / slices;
    float frequency = 4.0;
    float2 pwNoiseAndWorleyNoise = PerlinWorleyNoise(float3(uv, z), frequency);

    float4 color = 0.0;
    color.r += pwNoiseAndWorleyNoise.x; // Perlin Worley Noise
    color.g += pwNoiseAndWorleyNoise.y; // WorleyNoiseFbmForClouds at Frequency 4.0 * 1.0.
    color.b += WorleyNoiseFbmForClouds(float3(uv, z), frequency * 2.0);
    color.a += WorleyNoiseFbmForClouds(float3(uv, z), frequency * 4.0);

    OUT.m_color = color;

    return OUT;
}

