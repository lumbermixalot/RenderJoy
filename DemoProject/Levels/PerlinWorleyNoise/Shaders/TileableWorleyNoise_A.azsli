
#pragma once

#include "Common_A.azsli"

// This tileable version of tileable worly noise comes from:
// https://github.com/rikardolajos/noisegen/blob/master/NoiseGen/worley.cpp

float WorleyNoise(float3 input, float3 period)
{
	/* Determine which cube the evaluation point is in */
	float3 baseCell = floor(input);

	float shortest_distance = 10000.0f;

	/* Loop over the neightbors */
	[unroll]
	for (int iX = -1; iX <= 1; iX++)
	{
		[unroll]
		for (int iY = -1; iY <= 1; iY++)
		{
			[unroll]
			for (int iZ = -1; iZ <= 1; iZ++)
			{
				float3 cell = baseCell + float3(iX,iY,iZ);
				float3 tiledCell = modulo(cell, period);
				float3 cellPosition = cell + rand3dTo3d(tiledCell);
				float3 deltaToCell = cellPosition - input;

				// REMARKS:
				// It was found that both DOT(v,v) (aka|v|^2), instead of LENGTH(v)
				// gives better results for cloud formation.

                shortest_distance = min(shortest_distance, dot(deltaToCell, deltaToCell));
				//shortest_distance = min(shortest_distance, length(deltaToCell));
			}
		}
	}

    // Inverted Worley Noise for the Bubble Shape
    return 1.0 - shortest_distance;

	/* The inverse of the shortest distance normalized with the theoretical maximum */
	//float inv = 1.0f - shortest_distance;
    //
	//if (inv < 0.0) {
	//	inv = 0.0;
	//}
    //
    //return inv;

	/* Change from 0 - 1 to -1 - 1*/
	//return inv * 2.0f - 1.0f;
}

// @frequency typically equals 4.
float WorleyNoiseFbm(float3 input, float frequency, int octaves, float persistence)
{
    float total = 0;
    float amplitude = 1;
    float maxValue = 0;  // Used for normalizing result to 0.0 - 1.0
    for(int i=0;i<octaves;i++) {
        total += WorleyNoise(input * frequency, frequency) * amplitude;
        
        maxValue += amplitude;
        
        amplitude *= persistence;
        frequency *= 2;
    }
    
    return total/maxValue;
}
