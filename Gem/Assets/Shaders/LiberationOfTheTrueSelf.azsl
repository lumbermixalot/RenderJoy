// This is a port of:
// https://www.shadertoy.com/view/tlGfzd  by Kali

// Converted to RenderJoy by garrieta

#include "RenderJoyPassSrg.azsli"

#define resolution iResolution
#define time iTime

// by Dave_Hoskins
float Hash12(float2 p)
{
	float3 p3  = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}

float2x2 Rot(float a)
{
    float s = sin(a), c = cos(a);
    return float2x2(c, s, -s, c);
}

float Mod(float x, float y)
{
  return x - y * floor(x/y);
}

float De(float3 pos, inout float3 objcol)
{
    float t = Mod(time,17.);
    float a=smoothstep(13.,15.,t)*8.-smoothstep(4.,0.,t)*4.;
    float f=sin(time*5.+sin(time*20.)*.2);
    pos.xz = mul(pos.xz, Rot(time+.5));
    pos.yz = mul(pos.yz, Rot(time));
    float3 p = pos;
    float s=1.;
    for (int i=0; i<4; i++){
        p=abs(p)*1.3-.5-f*.1-a;
        p.xy = mul(p.xy, Rot(radians(45.)));
        p.xz = mul(p.xz, Rot(radians(45.)));
        s*=1.3;
    }
    float fra = length(p)/s-.5;
    pos.xy = mul(pos.xy, Rot(time));
    p = abs(pos) - 2. - a;
    float d = length(p) - .7;
    d = min(d, max(length(p.xz)-.1,p.y));
    d = min(d, max(length(p.yz)-.1,p.x));
    d = min(d, max(length(p.xy)-.1,p.z));
    p = abs(pos);
    p.x -= 4.+a+f*.5;
    d = min(d, length(p) - .7);
    d = min(d, length(p.yz-abs(sin(p.x*.5-time*10.)*.3)));
    p = abs(pos);
    p.y -= 4.+a+f*.5;
    d = min(d, length(p) - .7);
    d = min(d, max(length(p.xz)-.1,p.y));
    d = min(d, fra);
    objcol = abs(p);
    if (d==fra) objcol=float3(2.,0.,0.);
    return d;
}


float3 Normal(float3 p, inout float3 objcol) {
    float2 d = float2(0., .01);
    return normalize(float3(De(p+d.yxx, objcol), De(p+d.xyx, objcol), De(p+d.xxy, objcol))-De(p, objcol));
}


float3 March(float3 from, float3 dir, float2 fragCoord)
{
    float3 objcol;
    float d = 0., td = 0., maxdist = 30.;
    float3 p = from, col = float3(0., 0, 0);
    for (int i = 0; i<100; i++)
    {
        float d2 = De(p, objcol) * (1.-Hash12(fragCoord.xy+time)*.2);
        if (d2<0.)
        {
            float3 n = Normal(p, objcol);
            dir = reflect(dir, n);
            d2 = .1;
          
        }
        d = max(.01, abs(d2));
        p += d * dir;
        td += d;
        if (td>maxdist) break;
        col += .01 * objcol;
    }
    return pow(col, float3(2., 2, 2));
}

PSOutput MainPS(VSOutput IN)
{
    PSOutput OUT;
    
    // Normalized pixel coordinates (from 0 to 1)
    //float2 uv = IN.m_position.xy / PassSrg::m_resolution.xy;
    //float4 texColor = PassSrg::m_channel[0].Sample(PassSrg::LinearSampler, uv);
    
    float2 fragCoord = IN.m_position.xy;

    float2 uv = fragCoord / resolution.xy - .5;
    uv.x *= resolution.x / resolution.y;
    float3 from = float3(0.,0.,-10.);
    float3 dir = normalize(float3(uv, 1.));
    float3 col = March(from, dir, fragCoord);

    OUT.m_color = float4(col,1.);
    return OUT;
}
